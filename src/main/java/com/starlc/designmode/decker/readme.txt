装饰者模式
解决什么问题：
如本例所采用的案例，人穿衣服，根据穿衣的习惯 衣服可以分为 衣服 裤子  种类繁多：内衣，内裤，裤子，上衣，外套，西装，装饰品 等等，
人们根据不同的季节，天气、场合会有不同的穿着打扮，所以主要就是一个灵活搭配的问题。人们可以根据自己的实际需求选择不同服饰。
适用于什么场景：

缺点：
	装饰者模式 一个接口/获取抽象类 ，一个抽象的构件  和 诸多子类  ，具体的构件只需要实现接口（抽象类）。因此使用装饰者模式的时候会有很多小类，并且类结构比较简单。
	比如  西装，T恤，牛仔衣，牛仔裤 等等，当然在实际使用时我们还需要根据自己当前的主题对服饰进行更加详细的分类。
	
	
	已有功能动态添加更多功能的一种方式。
	当系统需要添加新功能时，不增加主类的复杂度，装饰者模式把要装饰的功能放在单独的类中，并让这个类包装他所需要装饰的对象。
	当需要执行特殊行为时，客户代码可以根据自己需要，有选择的、按顺序的使用装饰功能包装对象
	
	有效的把类的核心职责和装饰功能区分开了，而且可以去除相关类中重复的装饰逻辑。